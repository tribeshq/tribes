// Code generated by internal/config/generate.
// DO NOT EDIT.
//

package configs

import (
	"fmt"

	"github.com/spf13/viper"
)

var ErrNotDefined = fmt.Errorf("variable not defined")

func init() {
	// Automatically bind environment variables.
	viper.AutomaticEnv()
}

const (
	ADMIN_ADDRESS              = "TRIBES_ADMIN_ADDRESS"
	ADMIN_ADDRESS_TEST         = "TRIBES_ADMIN_ADDRESS_TEST"
	BADGE_FACTORY_ADDRESS      = "TRIBES_BADGE_FACTORY_ADDRESS"
	EMERGENCY_WITHDRAW_ADDRESS = "TRIBES_EMERGENCY_WITHDRAW_ADDRESS"
	SAFE_ERC721_MINT_ADDRESS   = "TRIBES_SAFE_ERC721_MINT_ADDRESS"
	VERIFIER_ADDRESS           = "TRIBES_VERIFIER_ADDRESS"
	VERIFIER_ADDRESS_TEST      = "TRIBES_VERIFIER_ADDRESS_TEST"
	DATABASE_CONNECTION        = "TRIBES_DATABASE_CONNECTION"
	MAX_STARTUP_TIME           = "TRIBES_MAX_STARTUP_TIME"
)

func SetDefaults() {
	// Set defaults based on the TOML definitions.

	viper.SetDefault(ADMIN_ADDRESS, "0xD554153658E8D466428Fa48487f5aba18dF5E628")

	viper.SetDefault(ADMIN_ADDRESS_TEST, "0x976EA74026E726554dB657fA54763abd0C3a0aa9")

	viper.SetDefault(BADGE_FACTORY_ADDRESS, "0x85805ACaf14BAb97b8C6B3A28Ea001e28D9f2554")

	viper.SetDefault(EMERGENCY_WITHDRAW_ADDRESS, "0x1EcbED5bFfC231C0eb3E01AF5945fFf902E2D8De")

	viper.SetDefault(SAFE_ERC721_MINT_ADDRESS, "0x287503047cFd7Ca9F2F7dFdf354E09c2b59C1625")

	viper.SetDefault(VERIFIER_ADDRESS, "0xc2D8eb4a934AEc7268E414a3Fa3D20E0572d714b")

	viper.SetDefault(VERIFIER_ADDRESS_TEST, "0x0000000000000000000000000000000000000025")

	viper.SetDefault(DATABASE_CONNECTION, "sqlite:///mnt/data/tribes.db")

	viper.SetDefault(MAX_STARTUP_TIME, "15")

}

// RollupConfig holds configuration values for the rollup service.
type RollupConfig struct {

	// Database connection string
	DatabaseConnection URL `mapstructure:"TRIBES_DATABASE_CONNECTION"`

	// Maximum startup time for the rollup service
	MaxStartupTime Duration `mapstructure:"TRIBES_MAX_STARTUP_TIME"`
}

// LoadRollupConfig reads configuration from environment variables, a config file, and defaults.
// Priority: command line flags > environment variables > config file > defaults.
func LoadRollupConfig() (*RollupConfig, error) {
	SetDefaults()

	// Load config file if specified via --config flag.
	if cfgFile := viper.GetString("config"); cfgFile != "" {
		viper.SetConfigFile(cfgFile)
		if err := viper.ReadInConfig(); err != nil {
			return nil, fmt.Errorf("error reading config file: %w", err)
		}
	}

	var cfg RollupConfig
	var err error

	cfg.DatabaseConnection, err = GetDatabaseConnection()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_DATABASE_CONNECTION: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_DATABASE_CONNECTION is required for the rollup service: %w", err)
	}

	cfg.MaxStartupTime, err = GetMaxStartupTime()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_MAX_STARTUP_TIME: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_MAX_STARTUP_TIME is required for the rollup service: %w", err)
	}

	return &cfg, nil
}

// GetAdminAddress returns the value for the environment variable TRIBES_ADMIN_ADDRESS.
func GetAdminAddress() (Address, error) {
	s := viper.GetString(ADMIN_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", ADMIN_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", ADMIN_ADDRESS, ErrNotDefined)
}

// GetAdminAddressTest returns the value for the environment variable TRIBES_ADMIN_ADDRESS_TEST.
func GetAdminAddressTest() (Address, error) {
	s := viper.GetString(ADMIN_ADDRESS_TEST)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", ADMIN_ADDRESS_TEST, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", ADMIN_ADDRESS_TEST, ErrNotDefined)
}

// GetBadgeFactoryAddress returns the value for the environment variable TRIBES_BADGE_FACTORY_ADDRESS.
func GetBadgeFactoryAddress() (Address, error) {
	s := viper.GetString(BADGE_FACTORY_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", BADGE_FACTORY_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", BADGE_FACTORY_ADDRESS, ErrNotDefined)
}

// GetEmergencyWithdrawAddress returns the value for the environment variable TRIBES_EMERGENCY_WITHDRAW_ADDRESS.
func GetEmergencyWithdrawAddress() (Address, error) {
	s := viper.GetString(EMERGENCY_WITHDRAW_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", EMERGENCY_WITHDRAW_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", EMERGENCY_WITHDRAW_ADDRESS, ErrNotDefined)
}

// GetSafeErc721MintAddress returns the value for the environment variable TRIBES_SAFE_ERC721_MINT_ADDRESS.
func GetSafeErc721MintAddress() (Address, error) {
	s := viper.GetString(SAFE_ERC721_MINT_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", SAFE_ERC721_MINT_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", SAFE_ERC721_MINT_ADDRESS, ErrNotDefined)
}

// GetVerifierAddress returns the value for the environment variable TRIBES_VERIFIER_ADDRESS.
func GetVerifierAddress() (Address, error) {
	s := viper.GetString(VERIFIER_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", VERIFIER_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", VERIFIER_ADDRESS, ErrNotDefined)
}

// GetVerifierAddressTest returns the value for the environment variable TRIBES_VERIFIER_ADDRESS_TEST.
func GetVerifierAddressTest() (Address, error) {
	s := viper.GetString(VERIFIER_ADDRESS_TEST)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", VERIFIER_ADDRESS_TEST, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", VERIFIER_ADDRESS_TEST, ErrNotDefined)
}

// GetDatabaseConnection returns the value for the environment variable TRIBES_DATABASE_CONNECTION.
func GetDatabaseConnection() (URL, error) {
	s := viper.GetString(DATABASE_CONNECTION)
	if s != "" {
		v, err := toURL(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", DATABASE_CONNECTION, err)
		}
		return v, nil
	}
	return notDefinedURL(), fmt.Errorf("%s: %w", DATABASE_CONNECTION, ErrNotDefined)
}

// GetMaxStartupTime returns the value for the environment variable TRIBES_MAX_STARTUP_TIME.
func GetMaxStartupTime() (Duration, error) {
	s := viper.GetString(MAX_STARTUP_TIME)
	if s != "" {
		v, err := toDuration(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", MAX_STARTUP_TIME, err)
		}
		return v, nil
	}
	return notDefinedDuration(), fmt.Errorf("%s: %w", MAX_STARTUP_TIME, ErrNotDefined)
}
