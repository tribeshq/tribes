// Code generated by configs/generate.
// DO NOT EDIT.
//

package configs

import (
	"fmt"

	"github.com/spf13/viper"
)

var ErrNotDefined = fmt.Errorf("variable not defined")

func init() {
	// Automatically bind environment variables.
	viper.AutomaticEnv()
}

const (
	TRIBES_AUTH_KIND                      = "TRIBES_AUTH_KIND"
	TRIBES_AUTH_MNEMONIC                  = "TRIBES_AUTH_MNEMONIC"
	TRIBES_AUTH_MNEMONIC_ACCOUNT_INDEX    = "TRIBES_AUTH_MNEMONIC_ACCOUNT_INDEX"
	TRIBES_AUTH_MNEMONIC_FILE             = "TRIBES_AUTH_MNEMONIC_FILE"
	TRIBES_AUTH_PRIVATE_KEY               = "TRIBES_AUTH_PRIVATE_KEY"
	TRIBES_AUTH_PRIVATE_KEY_FILE          = "TRIBES_AUTH_PRIVATE_KEY_FILE"
	TRIBES_BLOCKCHAIN_HTTP_ENDPOINT       = "TRIBES_BLOCKCHAIN_HTTP_ENDPOINT"
	TRIBES_BLOCKCHAIN_ID                  = "TRIBES_BLOCKCHAIN_ID"
	TRIBES_CONTRACTS_APPLICATION_ADDRESS  = "TRIBES_CONTRACTS_APPLICATION_ADDRESS"
	TRIBES_CONTRACTS_ERC20_PORTAL_ADDRESS = "TRIBES_CONTRACTS_ERC20_PORTAL_ADDRESS"
	TRIBES_CONTRACTS_INPUT_BOX_ADDRESS    = "TRIBES_CONTRACTS_INPUT_BOX_ADDRESS"
	TRIBES_CONTRACTS_STABLECOIN_ADDRESS   = "TRIBES_CONTRACTS_STABLECOIN_ADDRESS"
	TRIBES_LOG_COLOR                      = "TRIBES_LOG_COLOR"
	TRIBES_LOG_LEVEL                      = "TRIBES_LOG_LEVEL"
	TRIBES_INSPECT_ENDPOINT               = "TRIBES_INSPECT_ENDPOINT"
	TRIBES_JSONRPC_ENDPOINT               = "TRIBES_JSONRPC_ENDPOINT"
)

func SetDefaults() {
	// Set defaults based on the TOML definitions.

	viper.SetDefault(TRIBES_AUTH_KIND, "mnemonic")

	// no default for TRIBES_AUTH_MNEMONIC

	viper.SetDefault(TRIBES_AUTH_MNEMONIC_ACCOUNT_INDEX, "0")

	// no default for TRIBES_AUTH_MNEMONIC_FILE

	// no default for TRIBES_AUTH_PRIVATE_KEY

	// no default for TRIBES_AUTH_PRIVATE_KEY_FILE

	// no default for TRIBES_BLOCKCHAIN_HTTP_ENDPOINT

	// no default for TRIBES_BLOCKCHAIN_ID

	// no default for TRIBES_CONTRACTS_APPLICATION_ADDRESS

	// no default for TRIBES_CONTRACTS_ERC20_PORTAL_ADDRESS

	// no default for TRIBES_CONTRACTS_INPUT_BOX_ADDRESS

	// no default for TRIBES_CONTRACTS_STABLECOIN_ADDRESS

	viper.SetDefault(TRIBES_LOG_COLOR, "true")

	viper.SetDefault(TRIBES_LOG_LEVEL, "info")

	// no default for TRIBES_INSPECT_ENDPOINT

	// no default for TRIBES_JSONRPC_ENDPOINT

}

// McpConfig holds configuration values for the mcp service.
type McpConfig struct {

	// HTTP endpoint for the blockchain RPC provider.
	TribesBlockchainHttpEndpoint URL `mapstructure:"TRIBES_BLOCKCHAIN_HTTP_ENDPOINT"`

	// An unique identifier representing a blockchain network.
	TribesBlockchainId uint64 `mapstructure:"TRIBES_BLOCKCHAIN_ID"`

	// If set to true, the node will add colors to its log output.
	TribesLogColor bool `mapstructure:"TRIBES_LOG_COLOR"`

	// One of "debug", "info", "warn", "error".
	TribesLogLevel LogLevel `mapstructure:"TRIBES_LOG_LEVEL"`

	// Inspect API service url.
	TribesInspectEndpoint string `mapstructure:"TRIBES_INSPECT_ENDPOINT"`

	// JSONRPC API service url.
	TribesJsonrpcEndpoint string `mapstructure:"TRIBES_JSONRPC_ENDPOINT"`
}

// LoadMcpConfig reads configuration from environment variables, a config file, and defaults.
// Priority: command line flags > environment variables > config file > defaults.
func LoadMcpConfig() (*McpConfig, error) {
	SetDefaults()

	// Load config file if specified via --config flag.
	if cfgFile := viper.GetString("config"); cfgFile != "" {
		viper.SetConfigFile(cfgFile)
		if err := viper.ReadInConfig(); err != nil {
			return nil, fmt.Errorf("error reading config file: %w", err)
		}
	}

	var cfg McpConfig
	var err error

	cfg.TribesBlockchainHttpEndpoint, err = GetTribesBlockchainHttpEndpoint()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_BLOCKCHAIN_HTTP_ENDPOINT: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_BLOCKCHAIN_HTTP_ENDPOINT is required for the mcp service: %w", err)
	}

	cfg.TribesBlockchainId, err = GetTribesBlockchainId()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_BLOCKCHAIN_ID: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_BLOCKCHAIN_ID is required for the mcp service: %w", err)
	}

	cfg.TribesLogColor, err = GetTribesLogColor()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_LOG_COLOR: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_LOG_COLOR is required for the mcp service: %w", err)
	}

	cfg.TribesLogLevel, err = GetTribesLogLevel()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_LOG_LEVEL: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_LOG_LEVEL is required for the mcp service: %w", err)
	}

	cfg.TribesInspectEndpoint, err = GetTribesInspectEndpoint()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_INSPECT_ENDPOINT: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_INSPECT_ENDPOINT is required for the mcp service: %w", err)
	}

	cfg.TribesJsonrpcEndpoint, err = GetTribesJsonrpcEndpoint()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_JSONRPC_ENDPOINT: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_JSONRPC_ENDPOINT is required for the mcp service: %w", err)
	}

	return &cfg, nil
}

// GetTribesAuthKind returns the value for the environment variable TRIBES_AUTH_KIND.
func GetTribesAuthKind() (AuthKind, error) {
	s := viper.GetString(TRIBES_AUTH_KIND)
	if s != "" {
		v, err := toAuthKind(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_AUTH_KIND, err)
		}
		return v, nil
	}
	return notDefinedAuthKind(), fmt.Errorf("%s: %w", TRIBES_AUTH_KIND, ErrNotDefined)
}

// GetTribesAuthMnemonic returns the value for the environment variable TRIBES_AUTH_MNEMONIC.
func GetTribesAuthMnemonic() (RedactedString, error) {
	s := viper.GetString(TRIBES_AUTH_MNEMONIC)
	if s != "" {
		v, err := toRedactedString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_AUTH_MNEMONIC, err)
		}
		return v, nil
	}
	return notDefinedRedactedString(), fmt.Errorf("%s: %w", TRIBES_AUTH_MNEMONIC, ErrNotDefined)
}

// GetTribesAuthMnemonicAccountIndex returns the value for the environment variable TRIBES_AUTH_MNEMONIC_ACCOUNT_INDEX.
func GetTribesAuthMnemonicAccountIndex() (RedactedUint, error) {
	s := viper.GetString(TRIBES_AUTH_MNEMONIC_ACCOUNT_INDEX)
	if s != "" {
		v, err := toRedactedUint(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_AUTH_MNEMONIC_ACCOUNT_INDEX, err)
		}
		return v, nil
	}
	return notDefinedRedactedUint(), fmt.Errorf("%s: %w", TRIBES_AUTH_MNEMONIC_ACCOUNT_INDEX, ErrNotDefined)
}

// GetTribesAuthMnemonicFile returns the value for the environment variable TRIBES_AUTH_MNEMONIC_FILE.
func GetTribesAuthMnemonicFile() (string, error) {
	s := viper.GetString(TRIBES_AUTH_MNEMONIC_FILE)
	if s != "" {
		v, err := toString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_AUTH_MNEMONIC_FILE, err)
		}
		return v, nil
	}
	return notDefinedstring(), fmt.Errorf("%s: %w", TRIBES_AUTH_MNEMONIC_FILE, ErrNotDefined)
}

// GetTribesAuthPrivateKey returns the value for the environment variable TRIBES_AUTH_PRIVATE_KEY.
func GetTribesAuthPrivateKey() (RedactedString, error) {
	s := viper.GetString(TRIBES_AUTH_PRIVATE_KEY)
	if s != "" {
		v, err := toRedactedString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_AUTH_PRIVATE_KEY, err)
		}
		return v, nil
	}
	return notDefinedRedactedString(), fmt.Errorf("%s: %w", TRIBES_AUTH_PRIVATE_KEY, ErrNotDefined)
}

// GetTribesAuthPrivateKeyFile returns the value for the environment variable TRIBES_AUTH_PRIVATE_KEY_FILE.
func GetTribesAuthPrivateKeyFile() (string, error) {
	s := viper.GetString(TRIBES_AUTH_PRIVATE_KEY_FILE)
	if s != "" {
		v, err := toString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_AUTH_PRIVATE_KEY_FILE, err)
		}
		return v, nil
	}
	return notDefinedstring(), fmt.Errorf("%s: %w", TRIBES_AUTH_PRIVATE_KEY_FILE, ErrNotDefined)
}

// GetTribesBlockchainHttpEndpoint returns the value for the environment variable TRIBES_BLOCKCHAIN_HTTP_ENDPOINT.
func GetTribesBlockchainHttpEndpoint() (URL, error) {
	s := viper.GetString(TRIBES_BLOCKCHAIN_HTTP_ENDPOINT)
	if s != "" {
		v, err := toURL(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_BLOCKCHAIN_HTTP_ENDPOINT, err)
		}
		return v, nil
	}
	return notDefinedURL(), fmt.Errorf("%s: %w", TRIBES_BLOCKCHAIN_HTTP_ENDPOINT, ErrNotDefined)
}

// GetTribesBlockchainId returns the value for the environment variable TRIBES_BLOCKCHAIN_ID.
func GetTribesBlockchainId() (uint64, error) {
	s := viper.GetString(TRIBES_BLOCKCHAIN_ID)
	if s != "" {
		v, err := toUint64(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_BLOCKCHAIN_ID, err)
		}
		return v, nil
	}
	return notDefineduint64(), fmt.Errorf("%s: %w", TRIBES_BLOCKCHAIN_ID, ErrNotDefined)
}

// GetTribesContractsApplicationAddress returns the value for the environment variable TRIBES_CONTRACTS_APPLICATION_ADDRESS.
func GetTribesContractsApplicationAddress() (Address, error) {
	s := viper.GetString(TRIBES_CONTRACTS_APPLICATION_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_CONTRACTS_APPLICATION_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", TRIBES_CONTRACTS_APPLICATION_ADDRESS, ErrNotDefined)
}

// GetTribesContractsErc20PortalAddress returns the value for the environment variable TRIBES_CONTRACTS_ERC20_PORTAL_ADDRESS.
func GetTribesContractsErc20PortalAddress() (Address, error) {
	s := viper.GetString(TRIBES_CONTRACTS_ERC20_PORTAL_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_CONTRACTS_ERC20_PORTAL_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", TRIBES_CONTRACTS_ERC20_PORTAL_ADDRESS, ErrNotDefined)
}

// GetTribesContractsInputBoxAddress returns the value for the environment variable TRIBES_CONTRACTS_INPUT_BOX_ADDRESS.
func GetTribesContractsInputBoxAddress() (Address, error) {
	s := viper.GetString(TRIBES_CONTRACTS_INPUT_BOX_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_CONTRACTS_INPUT_BOX_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", TRIBES_CONTRACTS_INPUT_BOX_ADDRESS, ErrNotDefined)
}

// GetTribesContractsStablecoinAddress returns the value for the environment variable TRIBES_CONTRACTS_STABLECOIN_ADDRESS.
func GetTribesContractsStablecoinAddress() (Address, error) {
	s := viper.GetString(TRIBES_CONTRACTS_STABLECOIN_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_CONTRACTS_STABLECOIN_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", TRIBES_CONTRACTS_STABLECOIN_ADDRESS, ErrNotDefined)
}

// GetTribesLogColor returns the value for the environment variable TRIBES_LOG_COLOR.
func GetTribesLogColor() (bool, error) {
	s := viper.GetString(TRIBES_LOG_COLOR)
	if s != "" {
		v, err := toBool(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_LOG_COLOR, err)
		}
		return v, nil
	}
	return notDefinedbool(), fmt.Errorf("%s: %w", TRIBES_LOG_COLOR, ErrNotDefined)
}

// GetTribesLogLevel returns the value for the environment variable TRIBES_LOG_LEVEL.
func GetTribesLogLevel() (LogLevel, error) {
	s := viper.GetString(TRIBES_LOG_LEVEL)
	if s != "" {
		v, err := toLogLevel(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_LOG_LEVEL, err)
		}
		return v, nil
	}
	return notDefinedLogLevel(), fmt.Errorf("%s: %w", TRIBES_LOG_LEVEL, ErrNotDefined)
}

// GetTribesInspectEndpoint returns the value for the environment variable TRIBES_INSPECT_ENDPOINT.
func GetTribesInspectEndpoint() (string, error) {
	s := viper.GetString(TRIBES_INSPECT_ENDPOINT)
	if s != "" {
		v, err := toString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_INSPECT_ENDPOINT, err)
		}
		return v, nil
	}
	return notDefinedstring(), fmt.Errorf("%s: %w", TRIBES_INSPECT_ENDPOINT, ErrNotDefined)
}

// GetTribesJsonrpcEndpoint returns the value for the environment variable TRIBES_JSONRPC_ENDPOINT.
func GetTribesJsonrpcEndpoint() (string, error) {
	s := viper.GetString(TRIBES_JSONRPC_ENDPOINT)
	if s != "" {
		v, err := toString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TRIBES_JSONRPC_ENDPOINT, err)
		}
		return v, nil
	}
	return notDefinedstring(), fmt.Errorf("%s: %w", TRIBES_JSONRPC_ENDPOINT, ErrNotDefined)
}
