// Code generated by internal/config/generate.
// DO NOT EDIT.
//

package configs

import (
	"fmt"

	"github.com/spf13/viper"
)

var ErrNotDefined = fmt.Errorf("variable not defined")

func init() {
	// Automatically bind environment variables.
	viper.AutomaticEnv()
}

const (
	ADMIN_ADDRESS              = "TRIBES_ADMIN_ADDRESS"
	ADMIN_ADDRESS_TEST         = "TRIBES_ADMIN_ADDRESS_TEST"
	DEPLOYER_ADDRESS           = "TRIBES_DEPLOYER_ADDRESS"
	EMERGENCY_WITHDRAW_ADDRESS = "TRIBES_EMERGENCY_WITHDRAW_ADDRESS"
	SAFE_CALL_ADDRESS          = "TRIBES_SAFE_CALL_ADDRESS"
	VERIFIER_ADDRESS           = "TRIBES_VERIFIER_ADDRESS"
	VERIFIER_ADDRESS_TEST      = "TRIBES_VERIFIER_ADDRESS_TEST"
	MAX_STARTUP_TIME           = "TRIBES_MAX_STARTUP_TIME"
)

func SetDefaults() {
	// Set defaults based on the TOML definitions.

	viper.SetDefault(ADMIN_ADDRESS, "0xD554153658E8D466428Fa48487f5aba18dF5E628")

	viper.SetDefault(ADMIN_ADDRESS_TEST, "0x976EA74026E726554dB657fA54763abd0C3a0aa9")

	viper.SetDefault(DEPLOYER_ADDRESS, "0x0000000000000000000000000000000000000013")

	viper.SetDefault(EMERGENCY_WITHDRAW_ADDRESS, "0x0000000000000000000000000000000000000006")

	viper.SetDefault(SAFE_CALL_ADDRESS, "0x0000000000000000000000000000000000000007")

	viper.SetDefault(VERIFIER_ADDRESS, "0xc2D8eb4a934AEc7268E414a3Fa3D20E0572d714b")

	viper.SetDefault(VERIFIER_ADDRESS_TEST, "0x0000000000000000000000000000000000000025")

	viper.SetDefault(MAX_STARTUP_TIME, "10")

}

// RollupConfig holds configuration values for the rollup service.
type RollupConfig struct {

	// Address of the admin user
	AdminAddress Address `mapstructure:"TRIBES_ADMIN_ADDRESS"`

	// Address of the admin user
	AdminAddressTest Address `mapstructure:"TRIBES_ADMIN_ADDRESS_TEST"`

	// Address of the deployer contract, who can deploy the contracts
	DeployerAddress Address `mapstructure:"TRIBES_DEPLOYER_ADDRESS"`

	// Address of the emergency withdraw address
	EmergencyWithdrawAddress Address `mapstructure:"TRIBES_EMERGENCY_WITHDRAW_ADDRESS"`

	// Address of the safe call address
	SafeCallAddress Address `mapstructure:"TRIBES_SAFE_CALL_ADDRESS"`

	// Address of the verifier contract, who can verify the social accounts
	VerifierAddress Address `mapstructure:"TRIBES_VERIFIER_ADDRESS"`

	// Address of the verifier contract, who can verify the social accounts
	VerifierAddressTest Address `mapstructure:"TRIBES_VERIFIER_ADDRESS_TEST"`

	// Maximum startup time for the rollup service
	MaxStartupTime Duration `mapstructure:"TRIBES_MAX_STARTUP_TIME"`
}

// LoadRollupConfig reads configuration from environment variables, a config file, and defaults.
// Priority: command line flags > environment variables > config file > defaults.
func LoadRollupConfig() (*RollupConfig, error) {
	SetDefaults()

	// Load config file if specified via --config flag.
	if cfgFile := viper.GetString("config"); cfgFile != "" {
		viper.SetConfigFile(cfgFile)
		if err := viper.ReadInConfig(); err != nil {
			return nil, fmt.Errorf("error reading config file: %w", err)
		}
	}

	var cfg RollupConfig
	var err error

	cfg.AdminAddress, err = GetAdminAddress()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_ADMIN_ADDRESS: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_ADMIN_ADDRESS is required for the rollup service: %w", err)
	}

	cfg.AdminAddressTest, err = GetAdminAddressTest()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_ADMIN_ADDRESS_TEST: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_ADMIN_ADDRESS_TEST is required for the rollup service: %w", err)
	}

	cfg.DeployerAddress, err = GetDeployerAddress()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_DEPLOYER_ADDRESS: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_DEPLOYER_ADDRESS is required for the rollup service: %w", err)
	}

	cfg.EmergencyWithdrawAddress, err = GetEmergencyWithdrawAddress()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_EMERGENCY_WITHDRAW_ADDRESS: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_EMERGENCY_WITHDRAW_ADDRESS is required for the rollup service: %w", err)
	}

	cfg.SafeCallAddress, err = GetSafeCallAddress()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_SAFE_CALL_ADDRESS: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_SAFE_CALL_ADDRESS is required for the rollup service: %w", err)
	}

	cfg.VerifierAddress, err = GetVerifierAddress()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_VERIFIER_ADDRESS: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_VERIFIER_ADDRESS is required for the rollup service: %w", err)
	}

	cfg.VerifierAddressTest, err = GetVerifierAddressTest()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_VERIFIER_ADDRESS_TEST: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_VERIFIER_ADDRESS_TEST is required for the rollup service: %w", err)
	}

	cfg.MaxStartupTime, err = GetMaxStartupTime()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get TRIBES_MAX_STARTUP_TIME: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("TRIBES_MAX_STARTUP_TIME is required for the rollup service: %w", err)
	}

	return &cfg, nil
}

// GetAdminAddress returns the value for the environment variable TRIBES_ADMIN_ADDRESS.
func GetAdminAddress() (Address, error) {
	s := viper.GetString(ADMIN_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", ADMIN_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", ADMIN_ADDRESS, ErrNotDefined)
}

// GetAdminAddressTest returns the value for the environment variable TRIBES_ADMIN_ADDRESS_TEST.
func GetAdminAddressTest() (Address, error) {
	s := viper.GetString(ADMIN_ADDRESS_TEST)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", ADMIN_ADDRESS_TEST, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", ADMIN_ADDRESS_TEST, ErrNotDefined)
}

// GetDeployerAddress returns the value for the environment variable TRIBES_DEPLOYER_ADDRESS.
func GetDeployerAddress() (Address, error) {
	s := viper.GetString(DEPLOYER_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", DEPLOYER_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", DEPLOYER_ADDRESS, ErrNotDefined)
}

// GetEmergencyWithdrawAddress returns the value for the environment variable TRIBES_EMERGENCY_WITHDRAW_ADDRESS.
func GetEmergencyWithdrawAddress() (Address, error) {
	s := viper.GetString(EMERGENCY_WITHDRAW_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", EMERGENCY_WITHDRAW_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", EMERGENCY_WITHDRAW_ADDRESS, ErrNotDefined)
}

// GetSafeCallAddress returns the value for the environment variable TRIBES_SAFE_CALL_ADDRESS.
func GetSafeCallAddress() (Address, error) {
	s := viper.GetString(SAFE_CALL_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", SAFE_CALL_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", SAFE_CALL_ADDRESS, ErrNotDefined)
}

// GetVerifierAddress returns the value for the environment variable TRIBES_VERIFIER_ADDRESS.
func GetVerifierAddress() (Address, error) {
	s := viper.GetString(VERIFIER_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", VERIFIER_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", VERIFIER_ADDRESS, ErrNotDefined)
}

// GetVerifierAddressTest returns the value for the environment variable TRIBES_VERIFIER_ADDRESS_TEST.
func GetVerifierAddressTest() (Address, error) {
	s := viper.GetString(VERIFIER_ADDRESS_TEST)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", VERIFIER_ADDRESS_TEST, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", VERIFIER_ADDRESS_TEST, ErrNotDefined)
}

// GetMaxStartupTime returns the value for the environment variable TRIBES_MAX_STARTUP_TIME.
func GetMaxStartupTime() (Duration, error) {
	s := viper.GetString(MAX_STARTUP_TIME)
	if s != "" {
		v, err := toDuration(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", MAX_STARTUP_TIME, err)
		}
		return v, nil
	}
	return notDefinedDuration(), fmt.Errorf("%s: %w", MAX_STARTUP_TIME, ErrNotDefined)
}
